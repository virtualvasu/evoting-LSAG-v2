/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IRegistrationContract {
  export type CertificateStruct = {
    governmentSignature: BytesLike;
    governmentPublicKey: BytesLike;
    voterPublicKey: BytesLike;
  };

  export type CertificateStructOutput = [
    governmentSignature: string,
    governmentPublicKey: string,
    voterPublicKey: string
  ] & {
    governmentSignature: string;
    governmentPublicKey: string;
    voterPublicKey: string;
  };
}

export interface IRegistrationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "electionSetup"
      | "isCertified"
      | "resetElectionSetup"
      | "storePollParams"
      | "storePub"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "electionSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCertified",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "resetElectionSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storePollParams",
    values: [BytesLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storePub",
    values: [IRegistrationContract.CertificateStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "electionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetElectionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storePollParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storePub", data: BytesLike): Result;
}

export interface IRegistrationContract extends BaseContract {
  connect(runner?: ContractRunner | null): IRegistrationContract;
  waitForDeployment(): Promise<this>;

  interface: IRegistrationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  electionSetup: TypedContractMethod<[], [boolean], "view">;

  isCertified: TypedContractMethod<[publicKey: BytesLike], [boolean], "view">;

  resetElectionSetup: TypedContractMethod<[], [void], "nonpayable">;

  storePollParams: TypedContractMethod<
    [
      _electionId: BytesLike,
      _candidates: BytesLike[],
      _randomChallenge: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  storePub: TypedContractMethod<
    [cert: IRegistrationContract.CertificateStruct],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "electionSetup"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCertified"
  ): TypedContractMethod<[publicKey: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "resetElectionSetup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storePollParams"
  ): TypedContractMethod<
    [
      _electionId: BytesLike,
      _candidates: BytesLike[],
      _randomChallenge: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storePub"
  ): TypedContractMethod<
    [cert: IRegistrationContract.CertificateStruct],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
