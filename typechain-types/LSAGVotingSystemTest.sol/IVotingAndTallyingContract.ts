/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IVotingAndTallyingContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "finalizeResults"
      | "getTallyResults"
      | "getVotingStats"
      | "hasVoted"
      | "isVoteTallied"
      | "startTallyingPhase"
      | "startVotingPhase"
      | "tally"
      | "voting"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "finalizeResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTallyResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoteTallied",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startTallyingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVotingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tally",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voting",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTallyResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVoteTallied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTallyingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVotingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tally", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voting", data: BytesLike): Result;
}

export interface IVotingAndTallyingContract extends BaseContract {
  connect(runner?: ContractRunner | null): IVotingAndTallyingContract;
  waitForDeployment(): Promise<this>;

  interface: IVotingAndTallyingContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  finalizeResults: TypedContractMethod<[], [boolean], "nonpayable">;

  getTallyResults: TypedContractMethod<[], [[string[], bigint[]]], "view">;

  getVotingStats: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, string]],
    "view"
  >;

  hasVoted: TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;

  isVoteTallied: TypedContractMethod<
    [voterIndex: BigNumberish],
    [boolean],
    "view"
  >;

  startTallyingPhase: TypedContractMethod<[], [boolean], "nonpayable">;

  startVotingPhase: TypedContractMethod<[], [boolean], "nonpayable">;

  tally: TypedContractMethod<
    [actualVoteSignature: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  voting: TypedContractMethod<
    [signatureOnHash: BytesLike, voteHash: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "finalizeResults"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getTallyResults"
  ): TypedContractMethod<[], [[string[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getVotingStats"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, string]], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoteTallied"
  ): TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "startTallyingPhase"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "startVotingPhase"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "tally"
  ): TypedContractMethod<
    [actualVoteSignature: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voting"
  ): TypedContractMethod<
    [signatureOnHash: BytesLike, voteHash: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  filters: {};
}
