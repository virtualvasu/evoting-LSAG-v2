/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LSAGVotingSystemTestInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ELECTION_ID"
      | "RANDOM_CHALLENGE"
      | "electionAuthority"
      | "getFinalResults"
      | "getVotingStatistics"
      | "registrationContract"
      | "resetSystem"
      | "runCompleteTest"
      | "testCandidates"
      | "voterRegistrationContract"
      | "votingAndTallyingContract"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TestResult"): EventFragment;

  encodeFunctionData(
    functionFragment: "ELECTION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RANDOM_CHALLENGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFinalResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetSystem",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "runCompleteTest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "voterRegistrationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingAndTallyingContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ELECTION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RANDOM_CHALLENGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFinalResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "runCompleteTest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterRegistrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingAndTallyingContract",
    data: BytesLike
  ): Result;
}

export namespace TestResultEvent {
  export type InputTuple = [testName: string, passed: boolean, message: string];
  export type OutputTuple = [
    testName: string,
    passed: boolean,
    message: string
  ];
  export interface OutputObject {
    testName: string;
    passed: boolean;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LSAGVotingSystemTest extends BaseContract {
  connect(runner?: ContractRunner | null): LSAGVotingSystemTest;
  waitForDeployment(): Promise<this>;

  interface: LSAGVotingSystemTestInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ELECTION_ID: TypedContractMethod<[], [string], "view">;

  RANDOM_CHALLENGE: TypedContractMethod<[], [string], "view">;

  electionAuthority: TypedContractMethod<[], [string], "view">;

  getFinalResults: TypedContractMethod<
    [],
    [[string[], bigint[]] & { candidates: string[]; voteCounts: bigint[] }],
    "view"
  >;

  getVotingStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string] & {
        totalRegistered: bigint;
        votesCast: bigint;
        votesTallied: bigint;
        currentPhase: string;
      }
    ],
    "view"
  >;

  registrationContract: TypedContractMethod<[], [string], "view">;

  resetSystem: TypedContractMethod<[], [void], "nonpayable">;

  runCompleteTest: TypedContractMethod<[], [void], "nonpayable">;

  testCandidates: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  voterRegistrationContract: TypedContractMethod<[], [string], "view">;

  votingAndTallyingContract: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ELECTION_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "RANDOM_CHALLENGE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "electionAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFinalResults"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { candidates: string[]; voteCounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string] & {
        totalRegistered: bigint;
        votesCast: bigint;
        votesTallied: bigint;
        currentPhase: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registrationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resetSystem"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "runCompleteTest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "testCandidates"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "voterRegistrationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votingAndTallyingContract"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TestResult"
  ): TypedContractEvent<
    TestResultEvent.InputTuple,
    TestResultEvent.OutputTuple,
    TestResultEvent.OutputObject
  >;

  filters: {
    "TestResult(string,bool,string)": TypedContractEvent<
      TestResultEvent.InputTuple,
      TestResultEvent.OutputTuple,
      TestResultEvent.OutputObject
    >;
    TestResult: TypedContractEvent<
      TestResultEvent.InputTuple,
      TestResultEvent.OutputTuple,
      TestResultEvent.OutputObject
    >;
  };
}
