/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RegistrationContract {
  export type CertificateStruct = {
    governmentSignature: BytesLike;
    governmentPublicKey: BytesLike;
    voterPublicKey: BytesLike;
  };

  export type CertificateStructOutput = [
    governmentSignature: string,
    governmentPublicKey: string,
    voterPublicKey: string
  ] & {
    governmentSignature: string;
    governmentPublicKey: string;
    voterPublicKey: string;
  };
}

export interface RegistrationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "candidates"
      | "certifiedPublicKeys"
      | "electionAuthority"
      | "electionId"
      | "electionSetup"
      | "getCandidates"
      | "isCertified"
      | "isElectionSetup"
      | "owner"
      | "randomChallenge"
      | "resetElectionSetup"
      | "storePollParams"
      | "storePub"
      | "transferOwnership"
      | "updateElectionAuthority"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CertificateStored"
      | "ElectionSetup"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "certifiedPublicKeys",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "electionAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "electionSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCertified",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isElectionSetup",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomChallenge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetElectionSetup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "storePollParams",
    values: [BytesLike, BytesLike[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "storePub",
    values: [RegistrationContract.CertificateStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateElectionAuthority",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "certifiedPublicKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "electionId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "electionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isElectionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "randomChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetElectionSetup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storePollParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "storePub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateElectionAuthority",
    data: BytesLike
  ): Result;
}

export namespace CertificateStoredEvent {
  export type InputTuple = [voterPublicKey: BytesLike];
  export type OutputTuple = [voterPublicKey: string];
  export interface OutputObject {
    voterPublicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ElectionSetupEvent {
  export type InputTuple = [
    electionId: BytesLike,
    candidateCount: BigNumberish
  ];
  export type OutputTuple = [electionId: string, candidateCount: bigint];
  export interface OutputObject {
    electionId: string;
    candidateCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegistrationContract extends BaseContract {
  connect(runner?: ContractRunner | null): RegistrationContract;
  waitForDeployment(): Promise<this>;

  interface: RegistrationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  candidates: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  certifiedPublicKeys: TypedContractMethod<
    [arg0: BytesLike],
    [boolean],
    "view"
  >;

  electionAuthority: TypedContractMethod<[], [string], "view">;

  electionId: TypedContractMethod<[], [string], "view">;

  electionSetup: TypedContractMethod<[], [boolean], "view">;

  getCandidates: TypedContractMethod<[], [string[]], "view">;

  isCertified: TypedContractMethod<[publicKey: BytesLike], [boolean], "view">;

  isElectionSetup: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  randomChallenge: TypedContractMethod<[], [string], "view">;

  resetElectionSetup: TypedContractMethod<[], [void], "nonpayable">;

  storePollParams: TypedContractMethod<
    [
      _electionId: BytesLike,
      _candidates: BytesLike[],
      _randomChallenge: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  storePub: TypedContractMethod<
    [cert: RegistrationContract.CertificateStruct],
    [boolean],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateElectionAuthority: TypedContractMethod<
    [newAuthority: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "certifiedPublicKeys"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "electionAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "electionId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "electionSetup"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isCertified"
  ): TypedContractMethod<[publicKey: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isElectionSetup"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "randomChallenge"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resetElectionSetup"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "storePollParams"
  ): TypedContractMethod<
    [
      _electionId: BytesLike,
      _candidates: BytesLike[],
      _randomChallenge: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "storePub"
  ): TypedContractMethod<
    [cert: RegistrationContract.CertificateStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateElectionAuthority"
  ): TypedContractMethod<[newAuthority: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "CertificateStored"
  ): TypedContractEvent<
    CertificateStoredEvent.InputTuple,
    CertificateStoredEvent.OutputTuple,
    CertificateStoredEvent.OutputObject
  >;
  getEvent(
    key: "ElectionSetup"
  ): TypedContractEvent<
    ElectionSetupEvent.InputTuple,
    ElectionSetupEvent.OutputTuple,
    ElectionSetupEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "CertificateStored(bytes)": TypedContractEvent<
      CertificateStoredEvent.InputTuple,
      CertificateStoredEvent.OutputTuple,
      CertificateStoredEvent.OutputObject
    >;
    CertificateStored: TypedContractEvent<
      CertificateStoredEvent.InputTuple,
      CertificateStoredEvent.OutputTuple,
      CertificateStoredEvent.OutputObject
    >;

    "ElectionSetup(bytes32,uint256)": TypedContractEvent<
      ElectionSetupEvent.InputTuple,
      ElectionSetupEvent.OutputTuple,
      ElectionSetupEvent.OutputObject
    >;
    ElectionSetup: TypedContractEvent<
      ElectionSetupEvent.InputTuple,
      ElectionSetupEvent.OutputTuple,
      ElectionSetupEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
