/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VoterRegistrationContract {
  export type VoterRecordStruct = {
    lsagSignature: BytesLike;
    votingPublicKey: BytesLike;
    isRegistered: boolean;
    registrationTime: BigNumberish;
  };

  export type VoterRecordStructOutput = [
    lsagSignature: string,
    votingPublicKey: string,
    isRegistered: boolean,
    registrationTime: bigint
  ] & {
    lsagSignature: string;
    votingPublicKey: string;
    isRegistered: boolean;
    registrationTime: bigint;
  };
}

export interface VoterRegistrationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getRegistrationStats"
      | "getVoterCount"
      | "getVoterRecord"
      | "isKeyImageUsed"
      | "isRegistered"
      | "registeredVoters"
      | "registrationContract"
      | "usedKeyImages"
      | "verify"
      | "voterCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RegistrationRejected" | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getRegistrationStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterRecord",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isKeyImageUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredVoters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedKeyImages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "voterCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getRegistrationStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isKeyImageUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredVoters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usedKeyImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voterCount", data: BytesLike): Result;
}

export namespace RegistrationRejectedEvent {
  export type InputTuple = [lsagSignature: BytesLike, reason: string];
  export type OutputTuple = [lsagSignature: string, reason: string];
  export interface OutputObject {
    lsagSignature: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [
    voterIndex: BigNumberish,
    votingPublicKey: BytesLike
  ];
  export type OutputTuple = [voterIndex: bigint, votingPublicKey: string];
  export interface OutputObject {
    voterIndex: bigint;
    votingPublicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VoterRegistrationContract extends BaseContract {
  connect(runner?: ContractRunner | null): VoterRegistrationContract;
  waitForDeployment(): Promise<this>;

  interface: VoterRegistrationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getRegistrationStats: TypedContractMethod<
    [],
    [
      [bigint, boolean] & { totalRegistered: bigint; registrationOpen: boolean }
    ],
    "view"
  >;

  getVoterCount: TypedContractMethod<[], [bigint], "view">;

  getVoterRecord: TypedContractMethod<
    [voterIndex: BigNumberish],
    [VoterRegistrationContract.VoterRecordStructOutput],
    "view"
  >;

  isKeyImageUsed: TypedContractMethod<[keyImage: BytesLike], [boolean], "view">;

  isRegistered: TypedContractMethod<
    [voterIndex: BigNumberish],
    [boolean],
    "view"
  >;

  registeredVoters: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, bigint] & {
        lsagSignature: string;
        votingPublicKey: string;
        isRegistered: boolean;
        registrationTime: bigint;
      }
    ],
    "view"
  >;

  registrationContract: TypedContractMethod<[], [string], "view">;

  usedKeyImages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verify: TypedContractMethod<
    [lsagSignature: BytesLike, votingPublicKey: BytesLike],
    [bigint],
    "nonpayable"
  >;

  voterCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getRegistrationStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, boolean] & { totalRegistered: bigint; registrationOpen: boolean }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoterCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVoterRecord"
  ): TypedContractMethod<
    [voterIndex: BigNumberish],
    [VoterRegistrationContract.VoterRecordStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isKeyImageUsed"
  ): TypedContractMethod<[keyImage: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "registeredVoters"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, bigint] & {
        lsagSignature: string;
        votingPublicKey: string;
        isRegistered: boolean;
        registrationTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registrationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "usedKeyImages"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [lsagSignature: BytesLike, votingPublicKey: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voterCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "RegistrationRejected"
  ): TypedContractEvent<
    RegistrationRejectedEvent.InputTuple,
    RegistrationRejectedEvent.OutputTuple,
    RegistrationRejectedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "RegistrationRejected(bytes,string)": TypedContractEvent<
      RegistrationRejectedEvent.InputTuple,
      RegistrationRejectedEvent.OutputTuple,
      RegistrationRejectedEvent.OutputObject
    >;
    RegistrationRejected: TypedContractEvent<
      RegistrationRejectedEvent.InputTuple,
      RegistrationRejectedEvent.OutputTuple,
      RegistrationRejectedEvent.OutputObject
    >;

    "VoterRegistered(uint256,bytes)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
