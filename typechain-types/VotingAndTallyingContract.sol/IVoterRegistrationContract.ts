/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IVoterRegistrationContract {
  export type VoterRecordStruct = {
    lsagSignature: BytesLike;
    votingPublicKey: BytesLike;
    isRegistered: boolean;
    registrationTime: BigNumberish;
  };

  export type VoterRecordStructOutput = [
    lsagSignature: string,
    votingPublicKey: string,
    isRegistered: boolean,
    registrationTime: bigint
  ] & {
    lsagSignature: string;
    votingPublicKey: string;
    isRegistered: boolean;
    registrationTime: bigint;
  };
}

export interface IVoterRegistrationContractInterface extends Interface {
  getFunction(
    nameOrSignature: "getVoterCount" | "isRegistered" | "registeredVoters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getVoterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredVoters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVoterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredVoters",
    data: BytesLike
  ): Result;
}

export interface IVoterRegistrationContract extends BaseContract {
  connect(runner?: ContractRunner | null): IVoterRegistrationContract;
  waitForDeployment(): Promise<this>;

  interface: IVoterRegistrationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVoterCount: TypedContractMethod<[], [bigint], "view">;

  isRegistered: TypedContractMethod<
    [voterIndex: BigNumberish],
    [boolean],
    "view"
  >;

  registeredVoters: TypedContractMethod<
    [index: BigNumberish],
    [IVoterRegistrationContract.VoterRecordStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVoterCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isRegistered"
  ): TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "registeredVoters"
  ): TypedContractMethod<
    [index: BigNumberish],
    [IVoterRegistrationContract.VoterRecordStructOutput],
    "view"
  >;

  filters: {};
}
