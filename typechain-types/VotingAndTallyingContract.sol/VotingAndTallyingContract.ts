/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VotingAndTallyingContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "finalizeResults"
      | "getTallyResults"
      | "getVotingStats"
      | "hasVoted"
      | "isVoteTallied"
      | "registrationContract"
      | "resultsFinalized"
      | "startTallyingPhase"
      | "startVotingPhase"
      | "tally"
      | "tallyResults"
      | "tallyingPhaseActive"
      | "totalVotesCast"
      | "totalVotesTallied"
      | "voterRegistrationContract"
      | "votes"
      | "voting"
      | "votingPhaseActive"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "PhaseChanged"
      | "ResultsFinalized"
      | "VoteCast"
      | "VoteTallied"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "finalizeResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTallyResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isVoteTallied",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resultsFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTallyingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startVotingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tally",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyResults",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tallyingPhaseActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotesCast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotesTallied",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voterRegistrationContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "voting",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPhaseActive",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "finalizeResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTallyResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVoteTallied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resultsFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startTallyingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVotingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tally", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tallyResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tallyingPhaseActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotesCast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalVotesTallied",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterRegistrationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPhaseActive",
    data: BytesLike
  ): Result;
}

export namespace PhaseChangedEvent {
  export type InputTuple = [phase: string, active: boolean];
  export type OutputTuple = [phase: string, active: boolean];
  export interface OutputObject {
    phase: string;
    active: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResultsFinalizedEvent {
  export type InputTuple = [
    candidates: BytesLike[],
    voteCounts: BigNumberish[]
  ];
  export type OutputTuple = [candidates: string[], voteCounts: bigint[]];
  export interface OutputObject {
    candidates: string[];
    voteCounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [voterIndex: BigNumberish, voteHash: BytesLike];
  export type OutputTuple = [voterIndex: bigint, voteHash: string];
  export interface OutputObject {
    voterIndex: bigint;
    voteHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteTalliedEvent {
  export type InputTuple = [voterIndex: BigNumberish, candidate: BytesLike];
  export type OutputTuple = [voterIndex: bigint, candidate: string];
  export interface OutputObject {
    voterIndex: bigint;
    candidate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingAndTallyingContract extends BaseContract {
  connect(runner?: ContractRunner | null): VotingAndTallyingContract;
  waitForDeployment(): Promise<this>;

  interface: VotingAndTallyingContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  finalizeResults: TypedContractMethod<[], [boolean], "nonpayable">;

  getTallyResults: TypedContractMethod<
    [],
    [[string[], bigint[]] & { candidates: string[]; voteCounts: bigint[] }],
    "view"
  >;

  getVotingStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string] & {
        totalRegistered: bigint;
        votesCast: bigint;
        votesTallied: bigint;
        currentPhase: string;
      }
    ],
    "view"
  >;

  hasVoted: TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;

  isVoteTallied: TypedContractMethod<
    [voterIndex: BigNumberish],
    [boolean],
    "view"
  >;

  registrationContract: TypedContractMethod<[], [string], "view">;

  resultsFinalized: TypedContractMethod<[], [boolean], "view">;

  startTallyingPhase: TypedContractMethod<[], [boolean], "nonpayable">;

  startVotingPhase: TypedContractMethod<[], [boolean], "nonpayable">;

  tally: TypedContractMethod<
    [actualVoteSignature: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  tallyResults: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  tallyingPhaseActive: TypedContractMethod<[], [boolean], "view">;

  totalVotesCast: TypedContractMethod<[], [bigint], "view">;

  totalVotesTallied: TypedContractMethod<[], [bigint], "view">;

  voterRegistrationContract: TypedContractMethod<[], [string], "view">;

  votes: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, boolean, bigint] & {
        signatureOnHash: string;
        voteHash: string;
        voteSubmitted: boolean;
        voteTallied: boolean;
        submissionTime: bigint;
      }
    ],
    "view"
  >;

  voting: TypedContractMethod<
    [signatureOnHash: BytesLike, voteHash: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  votingPhaseActive: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "finalizeResults"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getTallyResults"
  ): TypedContractMethod<
    [],
    [[string[], bigint[]] & { candidates: string[]; voteCounts: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string] & {
        totalRegistered: bigint;
        votesCast: bigint;
        votesTallied: bigint;
        currentPhase: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isVoteTallied"
  ): TypedContractMethod<[voterIndex: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "registrationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resultsFinalized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "startTallyingPhase"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "startVotingPhase"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "tally"
  ): TypedContractMethod<
    [actualVoteSignature: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tallyResults"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "tallyingPhaseActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalVotesCast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotesTallied"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "voterRegistrationContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "votes"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, boolean, boolean, bigint] & {
        signatureOnHash: string;
        voteHash: string;
        voteSubmitted: boolean;
        voteTallied: boolean;
        submissionTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "voting"
  ): TypedContractMethod<
    [signatureOnHash: BytesLike, voteHash: BytesLike, voterIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingPhaseActive"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "PhaseChanged"
  ): TypedContractEvent<
    PhaseChangedEvent.InputTuple,
    PhaseChangedEvent.OutputTuple,
    PhaseChangedEvent.OutputObject
  >;
  getEvent(
    key: "ResultsFinalized"
  ): TypedContractEvent<
    ResultsFinalizedEvent.InputTuple,
    ResultsFinalizedEvent.OutputTuple,
    ResultsFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoteTallied"
  ): TypedContractEvent<
    VoteTalliedEvent.InputTuple,
    VoteTalliedEvent.OutputTuple,
    VoteTalliedEvent.OutputObject
  >;

  filters: {
    "PhaseChanged(string,bool)": TypedContractEvent<
      PhaseChangedEvent.InputTuple,
      PhaseChangedEvent.OutputTuple,
      PhaseChangedEvent.OutputObject
    >;
    PhaseChanged: TypedContractEvent<
      PhaseChangedEvent.InputTuple,
      PhaseChangedEvent.OutputTuple,
      PhaseChangedEvent.OutputObject
    >;

    "ResultsFinalized(bytes32[],uint256[])": TypedContractEvent<
      ResultsFinalizedEvent.InputTuple,
      ResultsFinalizedEvent.OutputTuple,
      ResultsFinalizedEvent.OutputObject
    >;
    ResultsFinalized: TypedContractEvent<
      ResultsFinalizedEvent.InputTuple,
      ResultsFinalizedEvent.OutputTuple,
      ResultsFinalizedEvent.OutputObject
    >;

    "VoteCast(uint256,bytes32)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoteTallied(uint256,bytes32)": TypedContractEvent<
      VoteTalliedEvent.InputTuple,
      VoteTalliedEvent.OutputTuple,
      VoteTalliedEvent.OutputObject
    >;
    VoteTallied: TypedContractEvent<
      VoteTalliedEvent.InputTuple,
      VoteTalliedEvent.OutputTuple,
      VoteTalliedEvent.OutputObject
    >;
  };
}
